{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This workshop is designed to help you get familiar with AWS Security services and learn how to use them to identify and remediate threats in your environment. You'll be working with services such as Amazon GuardDuty (threat detection), Amazon Inspector (vulnerability & behavior analysis), AWS Security Hub (centralized security view). You will learn how to use these services to investigate threats during and after an attack, set up a notification and response pipeline, and add additional protections to improve the security posture of your environment. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Detect, Respond, Recover CAF Components : Detective, Responsive Scenario Your company is new to the cloud and has recently performed a lift-and-shift of your infrastructure for piloting purposes. You are a systems administrator and have been tasked with security monitoring within your AWS environment. As part of that maintenance you are also responsible for responding to any security event in your environment. Architecture For this Workshop you will have a simple setup with a single instance setup in the us-west-2 region. As this was a \u201clift-and-shift\u201d migration for piloting, you have yet to build redundancy into your application, so you have a single public-facing web server that is accessed through an internet gateway and retrieves static content from an S3 bucket. Region Please use the us-west-2 (Oregon) region for this workshop. Modules This workshop is broken up into the four modules below: Environment Build and Configuration Attack Simulation Detection and Remediation Review and Discussion","title":"Overview"},{"location":"#overview","text":"This workshop is designed to help you get familiar with AWS Security services and learn how to use them to identify and remediate threats in your environment. You'll be working with services such as Amazon GuardDuty (threat detection), Amazon Inspector (vulnerability & behavior analysis), AWS Security Hub (centralized security view). You will learn how to use these services to investigate threats during and after an attack, set up a notification and response pipeline, and add additional protections to improve the security posture of your environment. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Detect, Respond, Recover CAF Components : Detective, Responsive","title":"Overview"},{"location":"#scenario","text":"Your company is new to the cloud and has recently performed a lift-and-shift of your infrastructure for piloting purposes. You are a systems administrator and have been tasked with security monitoring within your AWS environment. As part of that maintenance you are also responsible for responding to any security event in your environment.","title":"Scenario"},{"location":"#architecture","text":"For this Workshop you will have a simple setup with a single instance setup in the us-west-2 region. As this was a \u201clift-and-shift\u201d migration for piloting, you have yet to build redundancy into your application, so you have a single public-facing web server that is accessed through an internet gateway and retrieves static content from an S3 bucket.","title":"Architecture"},{"location":"#region","text":"Please use the us-west-2 (Oregon) region for this workshop.","title":"Region"},{"location":"#modules","text":"This workshop is broken up into the four modules below: Environment Build and Configuration Attack Simulation Detection and Remediation Review and Discussion","title":"Modules"},{"location":"01-environment-setup/","text":"Module 1: Environment build and configuration In this first module you will be configuring detective and responsive controls for your environment. You will be running the first of two CloudFormation templates which will automate the creation of some of these controls and then you will manually configure the rest. Log into the AWS Console if you have not done so already. Agenda Enable Amazon Guard Duty - 5 min Run the initial CloudFormation Template \u2013 5 min Confirm SNS subscription in your email - 1 min Create a CloudWatch Rule - 5 min Enable AWS Security Hub - 5 min Enable Amazon GuardDuty Our first step is to enable Amazon GuardDuty, which will continuously monitor your environment for malicious or unauthorized behavior. Go to the Amazon GuardDuty console (us-west-2). If the Get Started button is available, click it. If not, GuardDuty is enabled, you can skip step three. On the next screen click the Enable GuardDuty button. GuardDuty is now enabled and continuously monitoring your CloudTrail logs, VPC flow logs, and DNS Query logs for threats in your environment. Deploy the AWS CloudFormation template To initiate the scenario and configure your environment you will need to run the module 1 CloudFormation template: Before you deploy the CloudFormation template feel free to view it here . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template, click Next to get to the Specify Details page. On the Specify Details section enter the necessary parameters as shown below. Parameter Value Stack name ThreatDetectionWksp-Env-Setup Email Address Any valid email address you have access to Once you have entered your parameters click Next , Click Next again. (leave everything on this page at the default) Finally, scroll down and check the box to acknowledge that the template will create IAM roles and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. You will get an email from SNS asking you to confirm the Subscription. Confirm the subscription so you can receive email alerts from AWS services during the workshop. The email may take 2-3 minutes to arrive, check your spam/junk folder if it doesn\u2019t arrive within that timeframe. Do not forget to check your email! Bonus (optional): SMS notifications You could setup SMS notifications for the findings: Open the SNS console (us-west-2) Go to Subscriptions and click Create Subscription Click on Topic ARN field and select the threat-detection-wksp Topic Select SMS as Protocol Enter your phone number using international format (+61xxx xxx xxx) Setup Amazon CloudWatch event rules and automatic response The CloudFormation template you just ran created CloudWatch Event Rules for alerting and response purposes. The steps below will walk you through creating the final rule. After this you'll have rules in place to receive email notifications and trigger AWS Lambda functions to respond to threats. Below are steps to create a rule through the console but you can also find out more about doing it programmatically by reviewing the Amazon GuardDuty Documentation . Open the CloudWatch console (us-west-2) In the navigation pane on the left, under Events , click Rules What are the current Rules in place setup to do? Click Create Rule Select Event Pattern click the dropdown labeled Build event pattern to match events by service and select Custom event pattern in the drop down. Copy and paste in the custom event pattern below: { \"source\" : [ \"aws.guardduty\" ], \"detail\" : { \"type\" : [ \"UnauthorizedAccess:EC2/MaliciousIPCaller.Custom\" ] } } For Targets , click Add Target , select Lambda Function , and then select threat-detection-wksp-remediation-nacl . Click Configure details at the bottom. On the Configure rule details screen fill out the Name and Description (suggestions below). Name: threat-detection-wksp-guardduty-finding-ec2-maliciousip Description: GuardDuty Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom Click Create rule . What will the function do when invoked? Consider examining the Lambda function to see what it does. Open the Lambda console . Click on the function named threat-detection-wksp-remediation-nacl Enable AWS Security Hub Now that all of your detective controls have been configured you need to enable AWS Security Hub , which will provide you with a comprehensive view of the security and compliance of your AWS environment. Go to the AWS Security Hub console. If the Go to Security Hub button is available, click it. If not, Security Hub is enabled, you can skip step 3. On the next screen click the Enable AWS Security Hub button. Keep the default Security standards options selected. Note that a popup may display to inform you of the new Security standard \"AWS Foundational Security Best Practices\". If you see red text AWS Config is not enabled on some accounts in the Security Hub Console, you can safely ignore for this workshop. AWS Security Hub is now enabled and will begin collecting and aggregating findings from the security services we have enabled so far. Architecture overview Your environment is now configured and ready for operations. Below is a diagram to depict the detective controls you now have in place. After you have successfully setup your environment, you can proceed to the next module.","title":"Module 1: Environment Build"},{"location":"01-environment-setup/#module-1-environment-build-and-configuration","text":"In this first module you will be configuring detective and responsive controls for your environment. You will be running the first of two CloudFormation templates which will automate the creation of some of these controls and then you will manually configure the rest. Log into the AWS Console if you have not done so already. Agenda Enable Amazon Guard Duty - 5 min Run the initial CloudFormation Template \u2013 5 min Confirm SNS subscription in your email - 1 min Create a CloudWatch Rule - 5 min Enable AWS Security Hub - 5 min","title":"Module 1: Environment build and configuration"},{"location":"01-environment-setup/#enable-amazon-guardduty","text":"Our first step is to enable Amazon GuardDuty, which will continuously monitor your environment for malicious or unauthorized behavior. Go to the Amazon GuardDuty console (us-west-2). If the Get Started button is available, click it. If not, GuardDuty is enabled, you can skip step three. On the next screen click the Enable GuardDuty button. GuardDuty is now enabled and continuously monitoring your CloudTrail logs, VPC flow logs, and DNS Query logs for threats in your environment.","title":"Enable Amazon GuardDuty"},{"location":"01-environment-setup/#deploy-the-aws-cloudformation-template","text":"To initiate the scenario and configure your environment you will need to run the module 1 CloudFormation template: Before you deploy the CloudFormation template feel free to view it here . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template, click Next to get to the Specify Details page. On the Specify Details section enter the necessary parameters as shown below. Parameter Value Stack name ThreatDetectionWksp-Env-Setup Email Address Any valid email address you have access to Once you have entered your parameters click Next , Click Next again. (leave everything on this page at the default) Finally, scroll down and check the box to acknowledge that the template will create IAM roles and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. You will get an email from SNS asking you to confirm the Subscription. Confirm the subscription so you can receive email alerts from AWS services during the workshop. The email may take 2-3 minutes to arrive, check your spam/junk folder if it doesn\u2019t arrive within that timeframe. Do not forget to check your email! Bonus (optional): SMS notifications You could setup SMS notifications for the findings: Open the SNS console (us-west-2) Go to Subscriptions and click Create Subscription Click on Topic ARN field and select the threat-detection-wksp Topic Select SMS as Protocol Enter your phone number using international format (+61xxx xxx xxx)","title":"Deploy the AWS CloudFormation template"},{"location":"01-environment-setup/#setup-amazon-cloudwatch-event-rules-and-automatic-response","text":"The CloudFormation template you just ran created CloudWatch Event Rules for alerting and response purposes. The steps below will walk you through creating the final rule. After this you'll have rules in place to receive email notifications and trigger AWS Lambda functions to respond to threats. Below are steps to create a rule through the console but you can also find out more about doing it programmatically by reviewing the Amazon GuardDuty Documentation . Open the CloudWatch console (us-west-2) In the navigation pane on the left, under Events , click Rules What are the current Rules in place setup to do? Click Create Rule Select Event Pattern click the dropdown labeled Build event pattern to match events by service and select Custom event pattern in the drop down. Copy and paste in the custom event pattern below: { \"source\" : [ \"aws.guardduty\" ], \"detail\" : { \"type\" : [ \"UnauthorizedAccess:EC2/MaliciousIPCaller.Custom\" ] } } For Targets , click Add Target , select Lambda Function , and then select threat-detection-wksp-remediation-nacl . Click Configure details at the bottom. On the Configure rule details screen fill out the Name and Description (suggestions below). Name: threat-detection-wksp-guardduty-finding-ec2-maliciousip Description: GuardDuty Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom Click Create rule . What will the function do when invoked? Consider examining the Lambda function to see what it does. Open the Lambda console . Click on the function named threat-detection-wksp-remediation-nacl","title":"Setup Amazon CloudWatch event rules and automatic response"},{"location":"01-environment-setup/#enable-aws-security-hub","text":"Now that all of your detective controls have been configured you need to enable AWS Security Hub , which will provide you with a comprehensive view of the security and compliance of your AWS environment. Go to the AWS Security Hub console. If the Go to Security Hub button is available, click it. If not, Security Hub is enabled, you can skip step 3. On the next screen click the Enable AWS Security Hub button. Keep the default Security standards options selected. Note that a popup may display to inform you of the new Security standard \"AWS Foundational Security Best Practices\". If you see red text AWS Config is not enabled on some accounts in the Security Hub Console, you can safely ignore for this workshop. AWS Security Hub is now enabled and will begin collecting and aggregating findings from the security services we have enabled so far.","title":"Enable AWS Security Hub"},{"location":"01-environment-setup/#architecture-overview","text":"Your environment is now configured and ready for operations. Below is a diagram to depict the detective controls you now have in place. After you have successfully setup your environment, you can proceed to the next module.","title":"Architecture overview"},{"location":"02-attack-simulation/","text":"Module 2: Attack Simulation Now that you have detective and responsive controls setup, you'll be running another CloudFormation template which will simulate the actual attack you will be investigating. Agenda Run the second CloudFormation template \u2013 10 min Deploy the CloudFormation template To initiate the attack simulation you will need to run the module 2 CloudFormation template: Before you deploy the CloudFormation template feel free to view it repo . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. The name of the stack will be automatically populated but you are free to change it, after which click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and click Create This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. If this fails with the error message [IAM_CAPABILITY] , please acknowledge that the template will create IAM roles, from the previous step Architecture overview Below is a diagram of the setup after the module 2 CloudFormation stack is created. Threat detection and response Please note it will take at least 20 minutes after the 2nd CloudFormation template has completed before you will start seeing findings. Consider examining the Lambda functions deployed in the environment (3 functions). Open the Lambda console .","title":"Module 2: Attack Simulation"},{"location":"02-attack-simulation/#module-2-attack-simulation","text":"Now that you have detective and responsive controls setup, you'll be running another CloudFormation template which will simulate the actual attack you will be investigating. Agenda Run the second CloudFormation template \u2013 10 min","title":"Module 2: Attack Simulation"},{"location":"02-attack-simulation/#deploy-the-cloudformation-template","text":"To initiate the attack simulation you will need to run the module 2 CloudFormation template: Before you deploy the CloudFormation template feel free to view it repo . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. The name of the stack will be automatically populated but you are free to change it, after which click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and click Create This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. If this fails with the error message [IAM_CAPABILITY] , please acknowledge that the template will create IAM roles, from the previous step","title":"Deploy the CloudFormation template"},{"location":"02-attack-simulation/#architecture-overview","text":"Below is a diagram of the setup after the module 2 CloudFormation stack is created. Threat detection and response Please note it will take at least 20 minutes after the 2nd CloudFormation template has completed before you will start seeing findings. Consider examining the Lambda functions deployed in the environment (3 functions). Open the Lambda console .","title":"Architecture overview"},{"location":"03-detection-and-remediation/","text":"Module 3: Detect, Investigate & Respond Unfortunately, due to a misconfiguration in your environment, an attacker may have been able to gain access to the web server. You are getting alerts from the security services you\u2019ve put in place indicating malicious activity. These alerts include communication with known malicious IP addresses, account reconnaissance, changes to an Amazon S3 bucket configuration, and disabling security configurations. You must identify what activity the intruder may have performed and how they did it so you can block the intruder\u2019s access, remediate the vulnerabilities, and restore the configuration to its proper state. Agenda Compromised AWS IAM credentials ~ 25-40 mins Compromised EC2 instance ~ 25-40 mins Part 1 - Compromised AWS IAM credentials Detect and investigate By now you\u2019ve received email alerts from the security services you enabled. Now what? As part of your risk driven detection strategy your organization has decided to prioritize AWS IAM related findings. Sort through your email alerts and identity this alert: Amazon GuardDuty Finding: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom From Amazon GuardDuty documentation Finding description : An API was invoked from an IP address on a custom threat list. This finding informs you that an API operation (for example, an attempt to launch an EC2 instance, create a new IAM user, modify your AWS privileges, and so on) was invoked from an IP address that is included on a threat list that you uploaded. In GuardDuty, a threat list consists of known malicious IP addresses. GuardDuty generates findings based on uploaded threat lists. This can indicate unauthorized access to your AWS resources with the intent of hiding the attacker\u2019s true identity. Email delays Please note it will take at least 20 minutes prior receiving emails. Email delays can be due to multiple parameters (sender, receiver servers). You can potentially go a bit faster by refreshing the GuardDuty console to find the finding. Copy the <Access Key ID> from the e-mail alert and keep it for later use. What credentials were used? While the e-mail alert provides some high level information regarding the API operation invoked and the IP address invoking it, further investigations are require to find out which credentials were used. Explore findings related to the access key (Amazon GuardDuty) Now that you have a resource identifier to pivot from you can use Amazon GuardDuty to start doing an initial investigation into these findings. Go to the Amazon GuardDuty console (us-west-2). Click in the Add filter criteria box, select Finding Type , and then enter UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom , then select Apply . Click on the finding to see the details. Note that you can resize the panel by dragging the middle vertical scrollbar to the left. Amazon GuardDuty Finding Details The finding detail panel contains multiple information sections: Finding summary / Resource affected / Action / Actor / Additional information For more details, you can review the Amazon GuardDuty documentation . Examine the Resource affected section: The temporary credentials of an EC2 instance were used to perform the API operation. The Instance ID field shows the EC2 instance. The Iam instance profile field shows the EC2 instance profile threat-detection-wksp-compromised-ec2-profile which relates to the IAM role threat-detection-wksp-compromised-ec2 . Take note of the Public IP field for that EC2. Examine the Action section: The Action type field shows that an 'AWS_API_CALL' have been performed using the EC2 IAM credentials. The Service name field shows which AWS service was contacted. The API field shows which action was performed on the above service. Examine the Actor section: The IP address field shows the IP address which invoked the API operation. This IP address is listed in a custom Guard Duty Threat List which contains known malicious IP addresses. Note that this IP address is different from our EC2 public IP address. It means that this IP used our EC2 temporary security credential to invoke the API. Guard Duty Threat lists You can view the Guard Duty custom threat list going to the Settings > List > Threat lists page and open the S3 text file. Respond Now that you have identified that a temporary security credential from an IAM role for EC2 is being used by an attacker, the decision has been made to rotate the credential immediately to prevent any further misuse or potential privilege escalation. Revoke the IAM role sessions (IAM) Browse to the AWS IAM console. Click Roles and find the role threat-detection-wksp-compromised-ec2 , and click on that Role Name . Click on the Revoke sessions tab. Click on Revoke active sessions . Click the acknowledgement check box and then click Revoke active sessions . What is the mechanism that is put in place by this step to actually prevent the use of the temporary security credentials issued by this role? Restart the EC2 instance to rotate the access keys (EC2) All active credentials for the compromised IAM role have been invalidated. This means the attacker can no longer use those access keys, but it also means that any applications that use this role can't as well. You knew this going in but decided it was necessary due to the high risk of a compromised IAM access key. In order to ensure the availability of your application you need to refresh the access keys on the instance by stopping and starting the instance. A simple reboot will not change the keys. If you waited the temporary security credential on the instance would be refreshed but this procedure will speed things up. Since you are using AWS Systems Manager for administration on your EC2 instances you can use it to query the metadata to validate that the access keys were rotated after the instance restart. In the EC2 console Stop the Instance named threat-detection-wksp: Compromised Instance . Check the box next to the instance, select the Actions menu , Instance State , Stop , confirm by pressing Yes , Stop Wait for the Instance State to say stopped under Instance State (you may need to refresh the EC2 console) and then Start the instance. Take note of the Instance ID for later use. You will need to wait until all Status Checks have passed before continuing. Verify the access keys have been rotated (Systems Manager) Go to AWS Systems Manager console and click on Session Manager on the left navigation and then click Start Session . You should see an instance named threat-detection-wksp: Compromised Instance with a Instance state of running . To see the credentials currently active on the instance, click on the radio button next to threat-detection-wksp: Compromised Instance and click Start Session . Run the following command in the shell and compare the access key ID to the one found in the email alerts to ensure it has changed: curl http://169.254.169.254/latest/meta-data/iam/security-credentials/threat-detection-wksp-compromised-ec2 Why would this scenario be a good use case for auto-scaling groups? At this point you've successfully revoked all the active sessions from AWS IAM role and rotated the temporary security credentials on the EC2 instance. Part 2 - Compromised EC2 instance Detect and investigate Now that you've addressed the compromised IAM credential you need focus in on how the attacker was able to compromise the EC2 instance. It's this compromise which allowed them to query the instance metadata and steal the credentials. Explore findings related to the instance ID (AWS Security Hub) When investigating the compromised IAM credential you discovered that it was from an IAM role for EC2 and identified the EC2 instance ID of the finding. Using the instance ID (that you previously copied, it starts with an \u2018i\u2019, such as i-08fa26ffb15a66f5a) you can use AWS Security Hub to start investigating the findings. To start, you are going to research the GuardDuty findings related to the EC2 instance. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word GuardDuty . Use your browser's find function Control-F and paste in the <Instance ID> you copied earlier. Now copy the Amazon Resource Name (ARN) from the Resource ID for the first match. The ARN will look something like this arn:aws:ec2:us-west-2:166199753942:instance/i-0efc5172a5d7ecc6b Add one more filter by clicking the Add filter box again and selecting Resource ID and paste in the ARN from the previous step What GuardDuty findings do you see related to this instance ID? One of the findings should indicate that the EC2 instance is communicating with an IP address on a threat list ( disallowed IP ) which adds further evidence to the conclusion that the instance has been compromised. The other finding should indicate that a system at a particular IP address is performing an SSH brute force attack against your instance. You now need to investigate if the SSH brute force attack was successful and if that is what allowed the attacker to gain access to the instance. Determine if ssh password authentication is enabled on the EC2 instance (AWS Security Hub) Automated responses to threats can do many things. For example, you could have an trigger that helps gather information about the threat that could then be used in the investigation by the security team. With that option in mind, we have a CloudWatch event rule in place that will trigger an Amazon Inspector scan of an EC2 instance when GuardDuty detects a particular attack. We will use AWS Security Hub to view the findings from Inspector. We want to determine if the SSH configuration adheres to best practices. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word Inspector . Use your browser's find function Control-F and paste in password authentication over SSH The finding may not be on the first page of findings, use the > to move to the next page. Click on the finding regarding SSH and password authentication for the instance that experienced the SSH brute force attack and review. If you do not see any findings after a while, there may have been an issue with your Inspector agent. Go to the Inspector console, click on Assessment Templates , check the template that starts with threat-detection-wksp , and click Run . Please allow 15 minutes for the scan to complete. You can also look in Assessment runs and check the status . Feel free to continue through this module and check the results later on. After review you should see that password authentication over SSH is configured on the instance. In addition, if you examine some of the other Inspector findings you will see that there are no password complexity restrictions. This means the instance is more susceptible to an SSH brute force attack. Determine if the attacker was able to login to the EC2 instance (CloudWatch logs) Now that we know that the instance was more susceptible to an SSH brute force attack, let\u2019s look at the CloudWatch logs and create a metric to see if there were any successful SSH logins (to finally answer the question of whether the SSH brute force attack was successful.) Your corporate policy is to send security certain logs from EC2 instances to CloudWatch. Go to CloudWatch logs . Click on the log group /threat-detection-wksp/var/log/secure If you have multiple log streams, filter using the Instance ID you copied earlier and click on the stream. Within the Filter Events text box put the following Filter Pattern: [Mon, day, timestamp, ip, id, msg1= Invalid, msg2 = user, ...] Do you see any failed (invalid user) attempts to log into the instance? Would that be consistent with an SSH brute force attack? Now replace the Filter with one for successful attempts: [Mon, day, timestamp, ip, id, msg1= Accepted, msg2 = password, ...] Do you see any successful attempts to log into the instance? Which linux user was compromised? Respond Modify the EC2 security group (EC2) The active session from the attacker was automatically stopped by an update to the NACL on the subnet where the instance resides. This was done by a CloudWatch event rule trigger that is invoked based on certain GuardDuty findings. You've decided that all administration on EC2 Instances will be done through AWS Systems Manager so you no longer need administrative ports open so a good next step would be to modify the security group associated with the EC2 instance to prevent the attacker or anyone else from connecting. Go to the Amazon EC2 Console. Find the running instances with the name threat-detection-wksp: Compromised Instance . Under the Description tab, click on the Security Group for the compromised instance. View the rules under the Inbound rules tab. Click Edit inbound rules and delete the inbound SSH rule. The SSM Agent was installed on your EC2 Instance during the initial configuration. Click Save rules Congratulations! You have successfully remediated the incident and further hardened your environment. This is obviously a simulation and we can not cover every aspect of the response function in the short time allotted but hopefully this gave you an idea of the capabilities available on AWS to detect, investigate and respond to threats and attacks. Here is a diagram of the attack you just investigated. Numbers 1 & 2 show the SSH brute force attack and successful SSH login. Number 3 shows the S3 bucket changes the attacker made. Number 4 shows the API calls the attacker made with the IAM temporary credentials stolen from the compromised EC2 instance.","title":"Module 3: Detect & Respond"},{"location":"03-detection-and-remediation/#module-3-detect-investigate-respond","text":"Unfortunately, due to a misconfiguration in your environment, an attacker may have been able to gain access to the web server. You are getting alerts from the security services you\u2019ve put in place indicating malicious activity. These alerts include communication with known malicious IP addresses, account reconnaissance, changes to an Amazon S3 bucket configuration, and disabling security configurations. You must identify what activity the intruder may have performed and how they did it so you can block the intruder\u2019s access, remediate the vulnerabilities, and restore the configuration to its proper state. Agenda Compromised AWS IAM credentials ~ 25-40 mins Compromised EC2 instance ~ 25-40 mins","title":"Module 3: Detect, Investigate &amp; Respond"},{"location":"03-detection-and-remediation/#part-1-compromised-aws-iam-credentials","text":"","title":"Part 1 - Compromised AWS IAM credentials"},{"location":"03-detection-and-remediation/#detect-and-investigate","text":"By now you\u2019ve received email alerts from the security services you enabled. Now what? As part of your risk driven detection strategy your organization has decided to prioritize AWS IAM related findings. Sort through your email alerts and identity this alert: Amazon GuardDuty Finding: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom From Amazon GuardDuty documentation Finding description : An API was invoked from an IP address on a custom threat list. This finding informs you that an API operation (for example, an attempt to launch an EC2 instance, create a new IAM user, modify your AWS privileges, and so on) was invoked from an IP address that is included on a threat list that you uploaded. In GuardDuty, a threat list consists of known malicious IP addresses. GuardDuty generates findings based on uploaded threat lists. This can indicate unauthorized access to your AWS resources with the intent of hiding the attacker\u2019s true identity. Email delays Please note it will take at least 20 minutes prior receiving emails. Email delays can be due to multiple parameters (sender, receiver servers). You can potentially go a bit faster by refreshing the GuardDuty console to find the finding. Copy the <Access Key ID> from the e-mail alert and keep it for later use. What credentials were used? While the e-mail alert provides some high level information regarding the API operation invoked and the IP address invoking it, further investigations are require to find out which credentials were used. Explore findings related to the access key (Amazon GuardDuty) Now that you have a resource identifier to pivot from you can use Amazon GuardDuty to start doing an initial investigation into these findings. Go to the Amazon GuardDuty console (us-west-2). Click in the Add filter criteria box, select Finding Type , and then enter UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom , then select Apply . Click on the finding to see the details. Note that you can resize the panel by dragging the middle vertical scrollbar to the left. Amazon GuardDuty Finding Details The finding detail panel contains multiple information sections: Finding summary / Resource affected / Action / Actor / Additional information For more details, you can review the Amazon GuardDuty documentation . Examine the Resource affected section: The temporary credentials of an EC2 instance were used to perform the API operation. The Instance ID field shows the EC2 instance. The Iam instance profile field shows the EC2 instance profile threat-detection-wksp-compromised-ec2-profile which relates to the IAM role threat-detection-wksp-compromised-ec2 . Take note of the Public IP field for that EC2. Examine the Action section: The Action type field shows that an 'AWS_API_CALL' have been performed using the EC2 IAM credentials. The Service name field shows which AWS service was contacted. The API field shows which action was performed on the above service. Examine the Actor section: The IP address field shows the IP address which invoked the API operation. This IP address is listed in a custom Guard Duty Threat List which contains known malicious IP addresses. Note that this IP address is different from our EC2 public IP address. It means that this IP used our EC2 temporary security credential to invoke the API. Guard Duty Threat lists You can view the Guard Duty custom threat list going to the Settings > List > Threat lists page and open the S3 text file.","title":"Detect and investigate"},{"location":"03-detection-and-remediation/#respond","text":"Now that you have identified that a temporary security credential from an IAM role for EC2 is being used by an attacker, the decision has been made to rotate the credential immediately to prevent any further misuse or potential privilege escalation. Revoke the IAM role sessions (IAM) Browse to the AWS IAM console. Click Roles and find the role threat-detection-wksp-compromised-ec2 , and click on that Role Name . Click on the Revoke sessions tab. Click on Revoke active sessions . Click the acknowledgement check box and then click Revoke active sessions . What is the mechanism that is put in place by this step to actually prevent the use of the temporary security credentials issued by this role? Restart the EC2 instance to rotate the access keys (EC2) All active credentials for the compromised IAM role have been invalidated. This means the attacker can no longer use those access keys, but it also means that any applications that use this role can't as well. You knew this going in but decided it was necessary due to the high risk of a compromised IAM access key. In order to ensure the availability of your application you need to refresh the access keys on the instance by stopping and starting the instance. A simple reboot will not change the keys. If you waited the temporary security credential on the instance would be refreshed but this procedure will speed things up. Since you are using AWS Systems Manager for administration on your EC2 instances you can use it to query the metadata to validate that the access keys were rotated after the instance restart. In the EC2 console Stop the Instance named threat-detection-wksp: Compromised Instance . Check the box next to the instance, select the Actions menu , Instance State , Stop , confirm by pressing Yes , Stop Wait for the Instance State to say stopped under Instance State (you may need to refresh the EC2 console) and then Start the instance. Take note of the Instance ID for later use. You will need to wait until all Status Checks have passed before continuing. Verify the access keys have been rotated (Systems Manager) Go to AWS Systems Manager console and click on Session Manager on the left navigation and then click Start Session . You should see an instance named threat-detection-wksp: Compromised Instance with a Instance state of running . To see the credentials currently active on the instance, click on the radio button next to threat-detection-wksp: Compromised Instance and click Start Session . Run the following command in the shell and compare the access key ID to the one found in the email alerts to ensure it has changed: curl http://169.254.169.254/latest/meta-data/iam/security-credentials/threat-detection-wksp-compromised-ec2 Why would this scenario be a good use case for auto-scaling groups? At this point you've successfully revoked all the active sessions from AWS IAM role and rotated the temporary security credentials on the EC2 instance.","title":"Respond"},{"location":"03-detection-and-remediation/#part-2-compromised-ec2-instance","text":"","title":"Part 2 - Compromised EC2 instance"},{"location":"03-detection-and-remediation/#detect-and-investigate_1","text":"Now that you've addressed the compromised IAM credential you need focus in on how the attacker was able to compromise the EC2 instance. It's this compromise which allowed them to query the instance metadata and steal the credentials. Explore findings related to the instance ID (AWS Security Hub) When investigating the compromised IAM credential you discovered that it was from an IAM role for EC2 and identified the EC2 instance ID of the finding. Using the instance ID (that you previously copied, it starts with an \u2018i\u2019, such as i-08fa26ffb15a66f5a) you can use AWS Security Hub to start investigating the findings. To start, you are going to research the GuardDuty findings related to the EC2 instance. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word GuardDuty . Use your browser's find function Control-F and paste in the <Instance ID> you copied earlier. Now copy the Amazon Resource Name (ARN) from the Resource ID for the first match. The ARN will look something like this arn:aws:ec2:us-west-2:166199753942:instance/i-0efc5172a5d7ecc6b Add one more filter by clicking the Add filter box again and selecting Resource ID and paste in the ARN from the previous step What GuardDuty findings do you see related to this instance ID? One of the findings should indicate that the EC2 instance is communicating with an IP address on a threat list ( disallowed IP ) which adds further evidence to the conclusion that the instance has been compromised. The other finding should indicate that a system at a particular IP address is performing an SSH brute force attack against your instance. You now need to investigate if the SSH brute force attack was successful and if that is what allowed the attacker to gain access to the instance. Determine if ssh password authentication is enabled on the EC2 instance (AWS Security Hub) Automated responses to threats can do many things. For example, you could have an trigger that helps gather information about the threat that could then be used in the investigation by the security team. With that option in mind, we have a CloudWatch event rule in place that will trigger an Amazon Inspector scan of an EC2 instance when GuardDuty detects a particular attack. We will use AWS Security Hub to view the findings from Inspector. We want to determine if the SSH configuration adheres to best practices. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word Inspector . Use your browser's find function Control-F and paste in password authentication over SSH The finding may not be on the first page of findings, use the > to move to the next page. Click on the finding regarding SSH and password authentication for the instance that experienced the SSH brute force attack and review. If you do not see any findings after a while, there may have been an issue with your Inspector agent. Go to the Inspector console, click on Assessment Templates , check the template that starts with threat-detection-wksp , and click Run . Please allow 15 minutes for the scan to complete. You can also look in Assessment runs and check the status . Feel free to continue through this module and check the results later on. After review you should see that password authentication over SSH is configured on the instance. In addition, if you examine some of the other Inspector findings you will see that there are no password complexity restrictions. This means the instance is more susceptible to an SSH brute force attack. Determine if the attacker was able to login to the EC2 instance (CloudWatch logs) Now that we know that the instance was more susceptible to an SSH brute force attack, let\u2019s look at the CloudWatch logs and create a metric to see if there were any successful SSH logins (to finally answer the question of whether the SSH brute force attack was successful.) Your corporate policy is to send security certain logs from EC2 instances to CloudWatch. Go to CloudWatch logs . Click on the log group /threat-detection-wksp/var/log/secure If you have multiple log streams, filter using the Instance ID you copied earlier and click on the stream. Within the Filter Events text box put the following Filter Pattern: [Mon, day, timestamp, ip, id, msg1= Invalid, msg2 = user, ...] Do you see any failed (invalid user) attempts to log into the instance? Would that be consistent with an SSH brute force attack? Now replace the Filter with one for successful attempts: [Mon, day, timestamp, ip, id, msg1= Accepted, msg2 = password, ...] Do you see any successful attempts to log into the instance? Which linux user was compromised?","title":"Detect and investigate"},{"location":"03-detection-and-remediation/#respond_1","text":"Modify the EC2 security group (EC2) The active session from the attacker was automatically stopped by an update to the NACL on the subnet where the instance resides. This was done by a CloudWatch event rule trigger that is invoked based on certain GuardDuty findings. You've decided that all administration on EC2 Instances will be done through AWS Systems Manager so you no longer need administrative ports open so a good next step would be to modify the security group associated with the EC2 instance to prevent the attacker or anyone else from connecting. Go to the Amazon EC2 Console. Find the running instances with the name threat-detection-wksp: Compromised Instance . Under the Description tab, click on the Security Group for the compromised instance. View the rules under the Inbound rules tab. Click Edit inbound rules and delete the inbound SSH rule. The SSM Agent was installed on your EC2 Instance during the initial configuration. Click Save rules Congratulations! You have successfully remediated the incident and further hardened your environment. This is obviously a simulation and we can not cover every aspect of the response function in the short time allotted but hopefully this gave you an idea of the capabilities available on AWS to detect, investigate and respond to threats and attacks. Here is a diagram of the attack you just investigated. Numbers 1 & 2 show the SSH brute force attack and successful SSH login. Number 3 shows the S3 bucket changes the attacker made. Number 4 shows the API calls the attacker made with the IAM temporary credentials stolen from the compromised EC2 instance.","title":"Respond"},{"location":"04-review-and-discussion/","text":"Module 4: Review and Discussion In the last module we will have a short discussion and discuss exactly what occurred. We will also go over a number of questions to test your knowledge. Agenda Review & Discussion \u2013 10 min Questions \u2013 10 min Architecture Overview Below is a diagram of the overall workshop setup: What is Really Going On? In Module 1 of the workshop you setup the initial components of your infrastructure including detective controls such as GuardDuty, Inspector, SecurityHub as well as simple notification and remediation pipeline. Some of the steps required manual configuration but you also ran a CloudFormation template which setup some of the components. In Module 2 you launched a second CloudFormation template that initiated the attack simulated by this workshop. The CloudFormation template created two EC2 instances. One instance (named Malicious Host ) had an EIP attached to it that was added to your GuardDuty custom threat list. Although the Malicious Host is in the same VPC as the other instance, for the sake of the scenario (and to prevent the need to submit a penetration testing request) we acted as if it is on the Internet and represented the attack's computer. The other instance (named Compromised Instance ) was your web server and it was taken over by the Malicious Host . In Module 3 you investigated the attack, remediated the damage, and setup some automated remediations for future attacks. Here is what occurred in the attack: There are two instances created by the Module 2 CloudFormation template. They are in the same VPC but different subnets. The Malicious Host represents the attacker which we pretend is on the Internet. The Elastic IP on the Malicious Host is in a custom threat list in GuardDuty. The other instance named Compromised Instance represents the web server that was lifted and shifted into AWS. Although company policy is that only key-based authentication should be enabled for SSH, at some point password authentication for SSH was enabled on the Compromised Instance . This misconfiguration is identified in the Inspector scan that is triggered from the GuardDuty finding. The Malicious Host performed a brute force SSH password attack against the Compromised Instance . The brute force attack is designed to be successful. GuardDuty Finding : UnauthorizedAccess:EC2/SSHBruteForce The SSH brute force attack was successful and the attacker was able to log in to the Compromised Instance . Successful login is confirmed in CloudWatch Logs (/threat-detection-wksp/var/log/secure). The Compromised Instance also has a cron job that continuously pings the Malicious Host to generate a GuardDuty finding based off the custom threat list. GuardDuty Finding : UnauthorizedAccess:EC2/MaliciousIPCaller.Custom The API Calls that generated the API findings come from the Malicious Host . The calls use the temp creds from the IAM role for EC2 running on the Malicious Host . The GuardDuty findings are generated because the EIP attached to the Malicious Host is in a custom threat list. GuardDuty Finding : Recon:IAMUser/MaliciousIPCaller.Custom or GuardDuty Finding : UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom A number of CloudWatch Events Rules are invoked by the GuardDuty findings and then these trigger various services. CloudWatch Event Rule : The generic GuardDuty finding invokes a CloudWatch Event rule which triggers SNS to send an email. CloudWatch Event Rule : The SSH brute force attack finding invokes a CloudWatch Event rule which triggers a Lambda function to block the attacker IP address of the attacker via a NACL as well as a Lambda function that runs an Inspector scan on the EC2 instance. CloudWatch Event Rule : The Unauthorized Access Custom MaliciousIP finding invokes a CloudWatch Event rule which triggers a Lambda function to block the IP address of the attacker via a NACL. Finished! Congratulations on completing this workshop! This is the workshop's permanent home, so feel free to revisit as often as you'd like.","title":"Module 4: Discussion"},{"location":"04-review-and-discussion/#module-4-review-and-discussion","text":"In the last module we will have a short discussion and discuss exactly what occurred. We will also go over a number of questions to test your knowledge. Agenda Review & Discussion \u2013 10 min Questions \u2013 10 min","title":"Module 4: Review and Discussion"},{"location":"04-review-and-discussion/#architecture-overview","text":"Below is a diagram of the overall workshop setup:","title":"Architecture Overview"},{"location":"04-review-and-discussion/#what-is-really-going-on","text":"In Module 1 of the workshop you setup the initial components of your infrastructure including detective controls such as GuardDuty, Inspector, SecurityHub as well as simple notification and remediation pipeline. Some of the steps required manual configuration but you also ran a CloudFormation template which setup some of the components. In Module 2 you launched a second CloudFormation template that initiated the attack simulated by this workshop. The CloudFormation template created two EC2 instances. One instance (named Malicious Host ) had an EIP attached to it that was added to your GuardDuty custom threat list. Although the Malicious Host is in the same VPC as the other instance, for the sake of the scenario (and to prevent the need to submit a penetration testing request) we acted as if it is on the Internet and represented the attack's computer. The other instance (named Compromised Instance ) was your web server and it was taken over by the Malicious Host . In Module 3 you investigated the attack, remediated the damage, and setup some automated remediations for future attacks. Here is what occurred in the attack: There are two instances created by the Module 2 CloudFormation template. They are in the same VPC but different subnets. The Malicious Host represents the attacker which we pretend is on the Internet. The Elastic IP on the Malicious Host is in a custom threat list in GuardDuty. The other instance named Compromised Instance represents the web server that was lifted and shifted into AWS. Although company policy is that only key-based authentication should be enabled for SSH, at some point password authentication for SSH was enabled on the Compromised Instance . This misconfiguration is identified in the Inspector scan that is triggered from the GuardDuty finding. The Malicious Host performed a brute force SSH password attack against the Compromised Instance . The brute force attack is designed to be successful. GuardDuty Finding : UnauthorizedAccess:EC2/SSHBruteForce The SSH brute force attack was successful and the attacker was able to log in to the Compromised Instance . Successful login is confirmed in CloudWatch Logs (/threat-detection-wksp/var/log/secure). The Compromised Instance also has a cron job that continuously pings the Malicious Host to generate a GuardDuty finding based off the custom threat list. GuardDuty Finding : UnauthorizedAccess:EC2/MaliciousIPCaller.Custom The API Calls that generated the API findings come from the Malicious Host . The calls use the temp creds from the IAM role for EC2 running on the Malicious Host . The GuardDuty findings are generated because the EIP attached to the Malicious Host is in a custom threat list. GuardDuty Finding : Recon:IAMUser/MaliciousIPCaller.Custom or GuardDuty Finding : UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom A number of CloudWatch Events Rules are invoked by the GuardDuty findings and then these trigger various services. CloudWatch Event Rule : The generic GuardDuty finding invokes a CloudWatch Event rule which triggers SNS to send an email. CloudWatch Event Rule : The SSH brute force attack finding invokes a CloudWatch Event rule which triggers a Lambda function to block the attacker IP address of the attacker via a NACL as well as a Lambda function that runs an Inspector scan on the EC2 instance. CloudWatch Event Rule : The Unauthorized Access Custom MaliciousIP finding invokes a CloudWatch Event rule which triggers a Lambda function to block the IP address of the attacker via a NACL.","title":"What is Really Going On?"},{"location":"04-review-and-discussion/#finished","text":"Congratulations on completing this workshop! This is the workshop's permanent home, so feel free to revisit as often as you'd like.","title":"Finished!"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}